<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>theDB</title>
    <link>https://dbolella.github.io/index.xml</link>
    <description>Recent content on theDB</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>dbolella@gmail.com (Danny Bolella)</managingEditor>
    <webMaster>dbolella@gmail.com (Danny Bolella)</webMaster>
    <lastBuildDate>Fri, 03 Mar 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dbolella.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Training Days</title>
      <link>https://dbolella.github.io/post/2017-03-03-training-days/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      <author>dbolella@gmail.com (Danny Bolella)</author>
      <guid>https://dbolella.github.io/post/2017-03-03-training-days/</guid>
      <description>

&lt;p&gt;The past week and a half has been quite the agile adventure.  Opportunity after opportunity arose for me to learn and grow more than ever on my Scrum Master journey.  The three key events were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Business Agility 2017&lt;/li&gt;
&lt;li&gt;Certified Scrum Master Course taught by Dr. Jeff Sutherland (co-founder of Scrum and the Agile Manifesto )&lt;/li&gt;
&lt;li&gt;Pragmatic Management Lecture by Andy Hunt (co-founder of the Agile Manifesto and author of the Pragmatic Programmer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To say that my mind has been feeling overwhelmed lately is quite the understatement.  However, it allowed me to cover a lot of ground in my studies on agile.  Between reviewing the manifesto, going deeper on why scrum works, learning best practices, and listening to incredibly unbelievable stories and case studies from around the world, I feel completely empowered moving forward and have tons of ideas to bring to the table for our transformation.  Let me walk you through (on a high level) what this week has been for me.&lt;/p&gt;

&lt;h3 id=&#34;self-reflection&#34;&gt;Self-reflection&lt;/h3&gt;

&lt;p&gt;The deep stuff is where I&amp;rsquo;ll begin.  Making connections between what I&amp;rsquo;m learning/listening to and myself is someting that happens naturally for me.  As I sat through all the lectures, I ended up doing a lot of reflection.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be the first to admit that, for as much as I&amp;rsquo;ve tried to learn and practice agility and scrum, the one thing that has been lacking is feeling truly ahead.  I&amp;rsquo;ve always had confidence that I could figure things out as I went along, but rarely have I felt like I have clearly visualized the essence of how we, as scrum teams, would actually reach our goals.&lt;/p&gt;

&lt;p&gt;To be honest, I feel like I&amp;rsquo;ve allowed myself to be fooled a bit.  I honestly took agile to mean that not having the answers about things is ok and that we could just go with the flow.  But I&amp;rsquo;ve learned that&amp;rsquo;s false.  Why, then, would there be an agile manifesto?  Why would Scrum outline an entire framework?  Why would so many corporations have to pull resets on their agile transformations?&lt;/p&gt;

&lt;h3 id=&#34;the-key&#34;&gt;The Key&lt;/h3&gt;

&lt;p&gt;To ground this, a repeated quote that comes from one of my favorite Presidents (disclaimer: history minor) was &amp;ldquo;Plans are usless, but planning is everything.&amp;rdquo;.  I&amp;rsquo;m not proposing we lay out a hard defined roadmap for our transformation, that would be a waterfall approach to adopting agile.  But what I am saying is that we can be better prepared, trained, educated, and enlightened so that as we do move forward, everyone shares the same focus.&lt;/p&gt;

&lt;p&gt;When Eisenhower said this, he put it in the context of winning a battle.  Everyone from the soldiers to the officers have a common knowledge of their capabilities, their training, of the enemy, and of their goal, which is ultimately to win and/or advance.  And probably the most important part is that they know they can rely on each other and trust one another to meet their commitments and areas of cooperation.  When it comes to our business, we need to have the same thing.  We need to be on a &amp;lsquo;similar&amp;rsquo; level of education and training.  We need transparancy and trust.  We need a shared vision so we can all meet at the same place.&lt;/p&gt;

&lt;h3 id=&#34;a-re-new-ed-hope&#34;&gt;A (Re)new(ed) Hope&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s so much I can write here, and I plan to write a number of posts about all I&amp;rsquo;ve learned (or as much as I can get to).  But I&amp;rsquo;ll close this one with this:  I have a renewed hope.  I&amp;rsquo;m proud of what the team has accomplished so far and where our sub organization has accomplished.  But some days I&amp;rsquo;ve felt like we we&amp;rsquo;re beginning to flat line in terms of growth and becomming more agile.  Like we were destined to reach almost agile, never actually obtaining steady growth.&lt;/p&gt;

&lt;p&gt;Now I see that it&amp;rsquo;s not only possible, but that people have gone beyond.  That agile teams out there have gone beyond and moved onto models and techniques that honestly sound like business sci-fi.  And what&amp;rsquo;s more is I feel like I see how a team can get there.  It&amp;rsquo;s actually extemely straight-forward.  But just like it says in the scrum guide: It&amp;rsquo;s &amp;ldquo;lightweight&amp;rdquo;, &amp;ldquo;simple to understand&amp;rdquo;, but &amp;ldquo;difficult to understand&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;And you know what?  That&amp;rsquo;s ok.  I say &amp;ldquo;game on&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Agile Life Pt. 2</title>
      <link>https://dbolella.github.io/post/2016-12-23-agile2/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      <author>dbolella@gmail.com (Danny Bolella)</author>
      <guid>https://dbolella.github.io/post/2016-12-23-agile2/</guid>
      <description>

&lt;p&gt;Where I left off in my previous post was I had accepted an opportunity to become a Scrum MAster for a second agile team being spun up.  This was a big shift for me because it would mean little to no coding, at least initially.  Fortunately, that has changed since as I&amp;rsquo;m acting as a part-time iOS SME now as well as Scrum Master.  But I don&amp;rsquo;t want to get ahead of myself.&lt;/p&gt;

&lt;h3 id=&#34;beginnings&#34;&gt;Beginnings&lt;/h3&gt;

&lt;p&gt;Starting the team took a lot of work and patience.  The biggest challenge was building up trust in the individuals that Agile could bes trusted but that, at the versy least, we could trust one another within the team.  We spent a lot of time talking about cadence, norms, and goals before finally starting.  Laying down those foundations, though, brought the team together.  We were able to achieve a state where we were now embarking on something unfamiliar but that we weren&amp;rsquo;t alone with our uncertainty, which led to greater patience with each other.&lt;/p&gt;

&lt;h3 id=&#34;growth-from-challenges&#34;&gt;Growth from Challenges&lt;/h3&gt;

&lt;p&gt;We immeadiatly had to do 3 small scale releases to meet a new federal regulation across 3 apps.  On top of this, we were trying to close out features that were started in waterfall.  We were able to get releases out, but the legacy work was quickly identified as our first major obstacle.&lt;/p&gt;

&lt;p&gt;Another challenge were all the meetings.  We were given a meeting schedule that was just so draining.  Over 16 hours of meetings within a 60 hour sprint.  This was just not going to fly.  Eventually, we decided to refine our meetings.  We adopted best practices such as time boxing, prepping, and establishing focus/agendas for meetings.  Eventually, we brought it down to just 9 hours, a vast improvement.&lt;/p&gt;

&lt;p&gt;The last great challange was/is the rest of the company.  As the team began to mature, we began to recognize speed bumps/blocks through dependencies.  For an example, our regression testing cycle could easily add 6 weeks to any project before release.  But that would mean at least 1.5 month old code per release.  The solution took on many faces.  The regression team approached us with a plan that they could focus on one project at a time, reducing cycles to 3 weeks.  Then we identified that automated test scripts that were already written and prepared were hitting a simple bug, which led to none of the tests being run.  Identifying the problem allowed us to agree that the value would be tremendous if we could have them up and running, putting a new spotlight on the project.  And lastly, as a team we pointed out areas of the code per release that were clean.  By clean I mean it was untouched or already tested through a shared app.  By guiding the regression team, we were able to inspire confidence in our app&amp;rsquo;s code quality/stability and reduce the cycle even further.&lt;/p&gt;

&lt;h3 id=&#34;today&#34;&gt;Today&lt;/h3&gt;

&lt;p&gt;Do we have areas to grow in, absolutely.  But I can confidently say that our team is, for the most part, self-organizing, effecient, and cross-functional (within reason).  It&amp;rsquo;s exciting to see the team operate today.  For me, the biggest indication has been that I have felt free to address other responsibilities while the team continues to move forward and deliver.  This month, we&amp;rsquo;re looking to conduct 5 releases in 5 weeks and, without a release engineer, I have been busy coordinating all these releases.  To me, this is a strong indication of the teams strength and maturity, and a sign that we can take on bigger challenges moving forward.&lt;/p&gt;

&lt;p&gt;But this is just the beginning.  Where this journey will take us is uncertain, but the initial results build up hope that we may actually achieve agility.  There is a lot of hard work ahead, but the results will be worth it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Agile Life Pt. 1</title>
      <link>https://dbolella.github.io/post/2016-12-09-agile/</link>
      <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
      <author>dbolella@gmail.com (Danny Bolella)</author>
      <guid>https://dbolella.github.io/post/2016-12-09-agile/</guid>
      <description>

&lt;p&gt;When I first started at TDA, one of the things I learned was that the company was interested in making a transfomation to Agile.  Flashbacks immeadiatly went through my head.  Learnign about agile in my software engineering course, practicing Extreme Programming (XP) during one of my internships, and hearing all about wanting to do &amp;ldquo;agile&amp;rdquo; at JPMC (notice the quotation marks).  I&amp;rsquo;ve seen attempts at agile, good ones and bad ones.  But I was excited to see where this would go, mainly because the team really seemed to be open to attempting it.&lt;/p&gt;

&lt;p&gt;Two years later, I can definitely say it has been quite a ride.&lt;/p&gt;

&lt;h3 id=&#34;baby-steps&#34;&gt;Baby steps&lt;/h3&gt;

&lt;p&gt;At first, it was attempting to setup Continuous Integration with Jenkins and reaching some success.  Then it was pair programming WHILE learning iOS.  We began stand-ups.  We wrote what we would now identify as integration tests.&lt;/p&gt;

&lt;p&gt;Early on, though, we identified some key areas of growth.  Our SCM process was not really the best.  We also worked without clear backlogs, just checklists.  And pairing had it&amp;rsquo;s faults.  There was a fine line between synchronized pairing and lop sided development.&lt;/p&gt;

&lt;h3 id=&#34;pivotal&#34;&gt;Pivotal&lt;/h3&gt;

&lt;p&gt;To help us learn, our team began an engagement with Pivotal Labs to help us not only agile concepts but actively practice them as disciplines.  At first I wasn&amp;rsquo;t part of the engagement, but scheduling favored me to step in.&lt;/p&gt;

&lt;p&gt;The four months spent at Pivotal was absolutely some of the most interesting and  challenging of my post-college career.  The biggest difference was the open, free-spirited, experimental nature by which they approach work.  This was culture shock for me.  While, yes, that would be my approach for college and personal projects, I had to reverse so many corporate disciplines.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll get into the actual disciplines later, but my biggest take-away was that there is a balance to be struck when doing an agile transformation.  For instance, going a thousand miles per hour in a code base that pulls in millions of dollars on the regular is not the best course of action.  Expecting final decisions on designs or features from non-agile outside forces is foolish.  While Pivotal had plenty to comment about our code and process, there were plenty of smells that I predicted were actually incompatible with our situation that turned out to be true.&lt;/p&gt;

&lt;p&gt;While the cost was months of bug fixing, ultimately, the number of lessons learned were still countless.  It did give us a glimpse of the culture we DID want to adopt, but with the warning that it would take time, patience, and discipline.&lt;/p&gt;

&lt;h3 id=&#34;the-return&#34;&gt;The Return&lt;/h3&gt;

&lt;p&gt;When we came back, we went with the best intentions of keeping up what we learned.  What we realized over time, though, was that doing the amount of bug fixes that we had to was discouraging.  Eventually, it caused us to slack in some of our agile practices.&lt;/p&gt;

&lt;p&gt;Fortunately, we pushed ourselves not to forget or let go completely.  We would often hold each other accountable for slipping here or there and eventually settled into a system.  That&amp;rsquo;s not to say it was perfect or completely agile, but we were proud that we had at least radically changed our culture as a team.&lt;/p&gt;

&lt;p&gt;A major point of conflict with our efforts were everyone outside of the team.  We still operated within a waterfall architecture which caused conflicts with business vision, testing schedules, UX design changes, etc.  At one point, we had three different releases in flight because of the amount of changes that were being done between them.&lt;/p&gt;

&lt;h3 id=&#34;whole-teams&#34;&gt;Whole Teams&lt;/h3&gt;

&lt;p&gt;Eventually, a &amp;ldquo;whole team pilot&amp;rdquo; was begun.  I remained on the mobile development team while the pilot kicked off, but everyone had their eyes on what was going on.  The team would follow Scrum for the most part, which meant is was one of the first cross-functional teams.  It was an exciting time for the company because it was yet another drastic move towards agile, this time in-house.&lt;/p&gt;

&lt;p&gt;We had to give the team a lot of grace.  It definitely seemed like it was a culture shock for everyone on the team.  What&amp;rsquo;s worse was they had to switch coaches just after a month or so because the first could not give enough attention the the teams needs.&lt;/p&gt;

&lt;p&gt;As I observed, I made a lot of comparisons between what I had experienced back in college and at Pivotal.  I felt that some things were going well, but that certain key elements were missing.  My perspective as a developer gave me insight to how the team was still disfunctional despite being constructed as cross-functional.  Awareness of each others roles seemed low to me and therefore holding the team accountable to what they could do made it difficult.  This is no easy thing because agile calls for trust.  But, at the same time, without anyone pushing, it&amp;rsquo;s just as easy for people to take on less and less.  This wasn&amp;rsquo;t intentional or malicious by any means, that I knew and was comforted by.&lt;/p&gt;

&lt;h3 id=&#34;so-you-wanna-be-a-master&#34;&gt;So you wanna be a Master?&lt;/h3&gt;

&lt;p&gt;Eventually, a second agile team was being spun up.  I had been sharing my observations with my Director during our commute and that led to an offer to become Scrum Master of the new team.  A career goal was definitely to take on a leadership role, and this opportunity seemed hard to pass up.  Especially since a SM&amp;rsquo;s primary function is to be a servant leader, an approach I value tremendously.&lt;/p&gt;

&lt;p&gt;This is where I&amp;rsquo;ll end this post.  Stayed tune for the follow-up about my adventures being a Developer in a Scrum MAster role and the lessons learned and achievements we made as a team!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning Python</title>
      <link>https://dbolella.github.io/post/2016-11-25-learning-python-instapaper/</link>
      <pubDate>Fri, 25 Nov 2016 00:00:00 +0000</pubDate>
      <author>dbolella@gmail.com (Danny Bolella)</author>
      <guid>https://dbolella.github.io/post/2016-11-25-learning-python-instapaper/</guid>
      <description>

&lt;p&gt;My commute these days is long.  I mean 1.5 - 2 hours each way long.  Yeah, I know.&lt;/p&gt;

&lt;p&gt;So since it&amp;rsquo;s so long, I wanted to look into what content I could bring for my long journey each day.  I checked out podcasts, and that&amp;rsquo;s cool.  Audible was fine, but I didn&amp;rsquo;t want to pay (yeah, yeah, I&amp;rsquo;m cheap).  And coding in the car produces some stomach churning results.  So instead, I usually end up reading blogs or articles on some of my favorite sites.  But just as I&amp;rsquo;m able to preload podcasts, I wanted to do the same with my reading.&lt;/p&gt;

&lt;p&gt;Now I know Pocket and Instapaper exist, but the dev in me said, why don&amp;rsquo;t you do something about it?&lt;/p&gt;

&lt;h3 id=&#34;pythoning-my-way&#34;&gt;Pythoning my way&lt;/h3&gt;

&lt;p&gt;Python has been in the back burner of my mind since college.  I fooled around a bit for a little analytics project I was doing in college, but not much since.  So when I decided I wanted to make a site scraper, I decided this could be my opportunity to mess with it.&lt;/p&gt;

&lt;p&gt;What makes my project more tickey from just hitting an RSS feed was that for certain sites (e.g. relevantmagazine.com) they did not provide the actual contents, just info about and a link to the article.  So the goal was to take a feed and use it to grab articles themselves and scrape the info I wanted.&lt;/p&gt;

&lt;h2 id=&#34;what-i-used&#34;&gt;What I Used&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/codelucas/newspaper&#34;&gt;Newspaper&lt;/a&gt; by codelucas&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kurtmckee/feedparser&#34;&gt;FeedParser&lt;/a&gt; by kurtmckee&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/&#34;&gt;BeautifulSoup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-code&#34;&gt;The code&lt;/h2&gt;

&lt;p&gt;Overall, the code is pretty short.  The reason is because I found three open source packages that significantly reduced my effort and proved to be powerful (when combined).&lt;/p&gt;

&lt;p&gt;Feedparser is simple enough.  It pulls the rss feed from a URL you give it and allows you to explore it.  This is how I was able to get the URL&amp;rsquo;s for my articles.&lt;/p&gt;

&lt;p&gt;Next was Newspaper.  This package specifically tries to be an open source Instapaper.  However, it doesn&amp;rsquo;t work with sites with contentless rss feeds, hence my project remained valuable.  However, it was fantastic at grabbing the full HTML of the page and parsing into the data I wanted (author, title, text, and top image URL in this case).&lt;/p&gt;

&lt;p&gt;The last package, BeautifulSoup was necessary because as much as Newspaper has it&amp;rsquo;s own html parser for the body of an article, it wasn&amp;rsquo;t always reliable.  BS proved to be more powerful and in a single line parsed the articles wonderfully.&lt;/p&gt;

&lt;p&gt;So with these three packages and the use of built-in python code, I was bale to create a script that scraped all the articles and output them in JSON, ready to be consumed in an app or inserted into a database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;feed = feedparser.parse(str(sys.argv[1]))
print(feed.feed.title)
print(repr(len(feed.entries)) + &amp;quot; articles compiled on &amp;quot; + time.strftime(&amp;quot;%m/%d/%Y %H:%M:%S&amp;quot;) + &amp;quot;\n\n&amp;quot;)

for entry in feed.entries:
	article = Article(entry.link)
	article.download()
	article.parse()

	try:
	  html_string = ElementTree.tostring(article.clean_top_node)
	except:
	  html_string = &amp;quot;Error converting html to string.&amp;quot;

	soup = BeautifulSoup(html_string, &#39;html.parser&#39;)
	a = {
         &#39;authors&#39;: str(&#39;, &#39;.join(article.authors)), 
         &#39;title&#39;: article.title,
         &#39;text&#39;: soup.get_text(),
         &#39;top_image&#39;: article.top_image
         }

	pp = pprint.PrettyPrinter(indent=4)
	pp.pprint(a)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To see the full code and clone it, check it out on github &lt;a href=&#34;https://github.com/dbolella/articlesofease&#34;&gt;here&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Realm</title>
      <link>https://dbolella.github.io/post/2016-11-11-realm/</link>
      <pubDate>Fri, 11 Nov 2016 00:00:00 +0000</pubDate>
      <author>dbolella@gmail.com (Danny Bolella)</author>
      <guid>https://dbolella.github.io/post/2016-11-11-realm/</guid>
      <description>

&lt;p&gt;Realm is a mobile database that is sort of a replacement to SQLlite/Core Data that is known to be lightweight and even faster than it&amp;rsquo;s competition.  Realm is free and relatively easy to include in your project (though many comment that it&amp;rsquo;s quite difficult to remove).  One of the greatest advantages is that it flattens some of the traditional Data Access boilerplate and merges Models with Objects.&lt;/p&gt;

&lt;p&gt;With Realm 2.0, a brand new Platform has been released complete with an object server.  Whereas before a Realm was local to an app, it can now be synced to a server side database.  This removes the dependency of translating and sending Realm data manually to some other server/cloud based database solution.  It even handles the syncing automatically with very little code needed to setup.&lt;/p&gt;

&lt;p&gt;Is Realm the best solution: it depends.  But especially with the new platform, it makes it worth while to consider.&lt;/p&gt;

&lt;h2 id=&#34;resources-to-get-started&#34;&gt;Resources to Get Started&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;realm.io&#34;&gt;Realm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://realm.io/news/best-practices-pain-points-mobile-networking-rest-api-failures/&#34;&gt;Realm Platform vs RESTful APIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tech-details&#34;&gt;Tech Details&lt;/h2&gt;

&lt;h3 id=&#34;add-to-project&#34;&gt;Add to Project&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://realm.io/docs/realm-mobile-platform/get-started/&#34;&gt;Get all Realm items here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the package you downloaded, find the SDK folder appropriate for your project.  Take the framework files and add them to your project.&lt;/p&gt;

&lt;p&gt;Another item in your project is the Xcode plugin.  This plugin adds a Realm Object option when creating a New File.&lt;/p&gt;

&lt;p&gt;Lastly, there is the Realm Browser app for macOS.  This is a tool to explore the realm file created for your app.  After running your app with realm the first time, locate the default.realm file in your app&amp;rsquo;s data and open with the Browser.&lt;/p&gt;

&lt;h2 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://realm.io/docs/swift/latest/&#34;&gt;Simple Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;creating-an-object&#34;&gt;Creating an object&lt;/h2&gt;

&lt;p&gt;Realm will be different for anyone who is used to creating a database table schema and then data object models to capture it, or vice-versa in previous projects.  Since the database is local, there&amp;rsquo;s no need to do this work.  Instead, we create the model in the code, and the table schema (as well as the table itself) is automatically created and maintained in a .realm file.&lt;/p&gt;

&lt;p&gt;To do this, you just create a new class that extends the Realm Object.  Here&amp;rsquo;s a quick sample:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class Person: Object {
      dynamic var name = &amp;quot;&amp;quot;
      dynamic var age = 0
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Immediately we can start creating objects using our new class:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let danny = Person()
danny.name = &amp;quot;Danny&amp;quot;
danny.age = 27&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We now have this class defined in our code and an instance of this class.  However, we still do not have this stored in a Realm table, nor do we even have one defined.  So, let&amp;rsquo;s start by creating a Realm (which is essentially a local database):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let realm = try! Realm()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This code sets up a Realm instance that is synced with our default realm file (automatically default.realm).  (Note: you can specify your own realm files).  In this code, because default.realm does not exist, it automatically creates the file.&lt;/p&gt;

&lt;p&gt;Did you catch that?  We just made a database by initializing a Realm.  That&amp;rsquo;s how simple it is to get going.  Now watch what it takes to create a table complete with a schema and an entry:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;try! realm.write {
    realm.add(danny)
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it.  By simply setting a write block on the realm and adding our object, Realm has automatically taken care of setting up our table.  How can we confirm?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let people = realm.objects(Person.self)
print(people.count)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By calling the objects function on our realm, we request all entries that are of the type Person.  When we print the count of the results, we should expect to see 1.  If we wanted to filter for people whose age is 21 and over, we can add the filter to our query:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let people = realm.objects(Person.self).filter(&amp;quot;age &amp;gt;= 21&amp;quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using the filter function, we can add logic to get the results we want.&lt;/p&gt;

&lt;p&gt;Lastly, if we want to simultaneously update an object as well as it&amp;rsquo;s corresponding entry, we can do the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let firstPerson = realm.objects(Person.self).first
try! realm.write {
    firstPerson!.age = 28
}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;experiment&#34;&gt;Experiment&lt;/h2&gt;

&lt;h3 id=&#34;can-we-create-a-common-realm-util&#34;&gt;Can we create a common Realm Util?&lt;/h3&gt;

&lt;p&gt;Realm does allow for simple/plain code.  For instance, models are extremely easy to setup and queries are very standard.  Though you will quickly find blocks of code being repeated across different models.  Also, there are no built-in converters, for example, JSON to Object.  To be clear, there are, without a doubt, numerous edge cases.  However, there are enough generic functions that, I feel, we can collect into a simple util class.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multer &amp; SwiftHTTP</title>
      <link>https://dbolella.github.io/post/2016-10-28-multer-and-swifthttp/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      <author>dbolella@gmail.com (Danny Bolella)</author>
      <guid>https://dbolella.github.io/post/2016-10-28-multer-and-swifthttp/</guid>
      <description>

&lt;p&gt;For a small demo app I was building, I needed to upload a file from my app to my server to be saved locally.  Straight forward, especially since this was just for a demo.  What was frustrating though is I realized that trying to do this quickly with built-in code on both ends felt like it took way more than I wanted to get into (granted, never really did this before with these platforms so there&amp;rsquo;s that, too, I suppose).&lt;/p&gt;

&lt;p&gt;So a few searches later, I came across two tools that simplified it to just a few lines of code on either side.&lt;/p&gt;

&lt;p&gt;On the Swift side, SwiftHTTP simplified the POST call to a single function call that uses it&amp;rsquo;s own Upload class and a callback.  That&amp;rsquo;s all I wanted to do.  Done.&lt;/p&gt;

&lt;p&gt;On the Node.js side, I was already using express to get a server running.  What&amp;rsquo;s cool is express offers Multer as a solution. Multer says it&amp;rsquo;s really for forms that could use uploading, but it&amp;rsquo;s file uploading setup is simple enough to single-out.  How it works is that for the Request object, they extend it to not only have a body object, but also a file object.  So all you need to do is specify that you&amp;rsquo;re looking for a file in your post parameters and bam, you have your file.&lt;/p&gt;

&lt;p&gt;Easy enough!  In 20 lines of code across two platforms I had file uploading working.&lt;/p&gt;

&lt;h2 id=&#34;resources-to-get-started&#34;&gt;Resources to Get Started&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;swift.org&#34;&gt;Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/daltoniam/SwiftHTTP&#34;&gt;SwiftHTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/expressjs/multer&#34;&gt;Multer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tech-details&#34;&gt;Tech Details&lt;/h2&gt;

&lt;h3 id=&#34;my-implementation&#34;&gt;My implementation&lt;/h3&gt;

&lt;p&gt;Fastest way is to follow the install instructions for both.  From there, here&amp;rsquo;s the code I used:&lt;/p&gt;

&lt;p&gt;SwiftHTTP&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func upload() {
        do {
            let opt = try HTTP.POST(&amp;quot;http://localhost:3000/photo&amp;quot;, parameters: [&amp;quot;photo&amp;quot;: Upload(fileUrl: photoFileURL),&amp;quot;title&amp;quot;: titleString])
            opt.start { response in
                self.performSegue(withIdentifier: &amp;quot;finishRecording&amp;quot;, sender: nil)
            }
        } catch let error {
            print(&amp;quot;got an error creating the request: \(error)&amp;quot;)
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.post(&#39;/photo&#39;, upload.single(&#39;photo&#39;), function (req, res, next) {
  var tmp_path = req.file.path;
  var target_path = &#39;uploads/&#39; + req.file.originalname;
  var src = fs.createReadStream(tmp_path);
  var dest = fs.createWriteStream(target_path);
  src.pipe(dest);
  src.on(&#39;end&#39;, function() { 
    console.log(&amp;quot;UPLOAD COMPLETE&amp;quot;)
    res.send(&amp;quot;complete&amp;quot;); 
  });
  src.on(&#39;error&#39;, function(err) { res.send(&amp;quot;error&amp;quot;); });
})
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Kitura</title>
      <link>https://dbolella.github.io/post/2016-10-14-kitura/</link>
      <pubDate>Fri, 14 Oct 2016 00:00:00 +0000</pubDate>
      <author>dbolella@gmail.com (Danny Bolella)</author>
      <guid>https://dbolella.github.io/post/2016-10-14-kitura/</guid>
      <description>

&lt;p&gt;Swift is an open-source programming language that was started by Apple and is now supported by a rapidly growing community.  The Swift Evolution program will help steer the language to become not only more stable, but also modern and capable.  This also includes the goal of making Swift a truly cross-platform language, a vast departure for Apple.&lt;/p&gt;

&lt;p&gt;Many areas of software are exploring Swift, including VR, AI, and web.  A big area that has been gaining support is using swift as a server-side solution.  There are a number of possible advantages to using Swift this way, but some of the greatest reasons, in my opinion, are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code reusability&lt;/li&gt;
&lt;li&gt;Focus for most code can be on a single, modern language&lt;/li&gt;
&lt;li&gt;Fewer languages/technologies needed for full-stack&lt;/li&gt;
&lt;li&gt;Client side and server side developers can more easily be cross-functional&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recently, Swift.org made the announcement of the Server APIs Project.  As of right now, most of Swift&amp;rsquo;s networking capabilities are actually using C libraries.  The project unites most of the large Swift Server-side project owners (IBM, Perfect, etc) to push forward native Swift capabilities.&lt;/p&gt;

&lt;p&gt;A huge player in the server-side effort is IBM with their product, Kitura.  IBM made a partnership to drive business users towards Apple by supporting a number of Apple technologies.  Swift has become a huge player in this partnership for IBM and they&amp;rsquo;ve quickly latched on to the Swift journey (e.g. they created the Swift Sandbox, their own custom Swift Package Manager, and all of their mobile apps are written in Swift).  A furthering of this partnership has been in developing Kitura, and server-side Swift framework.  Though not the only solution out there (see Perfect, Vapor, and others), it comes with a slew of features that make it stand out.  Specifically, IBM has surrounded it with many of it&amp;rsquo;s other services including BlueMix, Cloud Tools, and even Watson integration.  And to measure the support/interest Kitura is generating, IBM had a special session at WWDC 2016 specifically on server-side Swift and, after it&amp;rsquo;s latest release, has been trending pretty rapidly on Github.&lt;/p&gt;

&lt;h2 id=&#34;resources-to-get-started&#34;&gt;Resources to Get Started&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;swift.org&#34;&gt;Swift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kitura.io&#34;&gt;Kitura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/IBM-Swift/Kitura#getting-started&#34;&gt;Kitura Git Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://realm.io/news/slug-edward-jiang-server-side-swift/&#34;&gt;Realm Talk: Super Spectacular Server Side Swift!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tech-details&#34;&gt;Tech Details&lt;/h2&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;The easiest way to get going is to clone IBM&amp;rsquo;s &lt;a href=&#34;https://github.com/IBM-Swift/Kitura-Sample&#34; title=&#34;Sample&#34;&gt;sample application&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.ibm.com/swift/2016/02/22/building-end-end-cloud-apps-using-swift-kitura/&#34;&gt;Simple Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;using-in-xcode&#34;&gt;Using in Xcode&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re a Mac/Xcode user, there&amp;rsquo;s a huge advantage in using Xcode to not only develop your Kitura server, but also debug and analyze it.  So how do you convert your Kitura project to an Xcode project?  Swift is able to self-generate an Xcode project with the following run in terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;swift package generate-xcodeproj&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When you open the new project in Xcode, just change the scheme to the executable.  Now you can run the sever.  Trying placing breakpoints to explore debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/IBM-Swift/Kitura/wiki/Building-your-Kitura-application-in-Xcode&#34;&gt;More info&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;package-manager&#34;&gt;Package Manager&lt;/h3&gt;

&lt;p&gt;IBM has it&amp;rsquo;s own Package Manager to enhance the Swift package Manager.  Add dependencies in the following format in the Package.swift file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.Package(url: &amp;quot;https://github.com/IBM-Swift/Kitura.git&amp;quot;, majorVersion: 0, minor: 30)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To find more IBM featured swift packages, check out their &lt;a href=&#34;https://swiftpkgs.ng.bluemix.net/?cm_mc_uid=38801362449714744605356&amp;amp;cm_mc_sid_50200000=1474559147&#34;&gt;catalog&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;routing&#34;&gt;Routing&lt;/h3&gt;

&lt;p&gt;The low-level way to get started is to know how routes work.  The router is a built-in Kitura class that handles requests to your server, which also includes sending out responses.  Let&amp;rsquo;s breakdown the anatomy of a router handler that you would find in the Kitura-Sample project:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;router.&amp;lt;#request type#&amp;gt;(&amp;quot;/&amp;lt;#route title#&amp;gt;&amp;quot;)
     {request, response, next in
        response.headers[&amp;quot;Content-Type&amp;quot;] = &amp;quot;text/plain; charset=utf-8&amp;quot;
        &amp;lt;#handle code here#&amp;gt;
        try response.send(&amp;quot;&amp;lt;#response#&amp;gt;&amp;quot;).end()
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The router class can handle your standard types of requests (e.g. GET, POST, PUT, etc.).  The route title portion specifies the title that will point the router to this specific handler (e.g. example.com/hellowworldhandler).  We get take in the request as well as a pre-formed response.  We see that we can customize our response properties before we send it out.  Now, in the handler block, this is where we can place the Swift code that we want to use to handle this request.  There are essentially no rules here, you can access Swift classes, structs, frameworks, and even Foundation.  Hence why Swift server-side is a desired framework because you can produce a Framework that can be common between your server and your app, reducing and reusing code.  The only thing we need to do is at the end, where we finally send back our response to complete handling the request.  Here&amp;rsquo;s a quick sample:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;router.get(&amp;quot;/helloworld&amp;quot;)
     {request, response, next in
        response.headers[&amp;quot;Content-Type&amp;quot;] = &amp;quot;text/plain; charset=utf-8&amp;quot;
        let hwString = &amp;quot;Hello World&amp;quot;
        try response.send(hwString).end()
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Simple enough!&lt;/p&gt;

&lt;h3 id=&#34;request-types-including-all&#34;&gt;Request types (including all)&lt;/h3&gt;

&lt;p&gt;A cool route type is &amp;ldquo;all&amp;rdquo;.  A route for &amp;ldquo;all&amp;rdquo; handles every request, even if there&amp;rsquo;s a more specific route.  This is good to catch session, authentications, and also handling the parsing of requests.&lt;/p&gt;

&lt;h3 id=&#34;parsedbody&#34;&gt;ParsedBody&lt;/h3&gt;

&lt;p&gt;Kitura has a built-in request body parser.  The types that we can expect are :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;URL-encoded form&lt;/li&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;li&gt;raw data&lt;/li&gt;
&lt;li&gt;multi-part&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>https://dbolella.github.io/post/2016-09-30-welcome/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      <author>dbolella@gmail.com (Danny Bolella)</author>
      <guid>https://dbolella.github.io/post/2016-09-30-welcome/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been a programming since my Sophomore year of high school.  That&amp;rsquo;s 12 years.  Code has taken me on an incredible journey through technology, ideas, industries, and imagination.  Nearly 20 programming languages and countless lines of code later, I am where I am today.&lt;/p&gt;

&lt;p&gt;So where is that?  For the past 2 years I was an iOS developer for a major brokerage firm.  However, when the opportunity to take on a leadership role on the team came up, I transitioned from being a dev to a Scrum Master.  And so far, I&amp;rsquo;m loving it.&lt;/p&gt;

&lt;p&gt;However, coding is no longer my primary function in this role.  I have been finding ways to sneak it in as a scrum master by automating the metrics reporting, working on our build machine, and taking on some of the coding tasks in our backlog.  But it&amp;rsquo;s still not enough to fufill that itch.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve found my answer in creating my own side projects and coding for fun.  That&amp;rsquo;s a weird way to put it, because as much as it can be frustrating at times, coding is fun.  But I&amp;rsquo;ve been reminded of just how fun coding can be when you&amp;rsquo;re doing it just for the heck of it, to grow, to learn.  It&amp;rsquo;s freeing in a sense. My wife finds painting and writing to be gret outlets that are life giving to her.  I&amp;rsquo;ve rediscovered that code is my medium.&lt;/p&gt;

&lt;p&gt;This blog serves to chronicle this new chapter in my life.  It hasn&amp;rsquo;t been the first time I&amp;rsquo;ve created a blog.  Bakc in college, I created &lt;a href=&#34;http://thedb.bolella.com&#34;&gt;this blog&lt;/a&gt; to track some of the cool projects I was working on then.  Now it&amp;rsquo;s time for a new chapter.  But not only for me to keep a track of what I&amp;rsquo;ll learn along the way, but hopefully to share with others.  I&amp;rsquo;m not going to claim that I&amp;rsquo;ll have answers to others problems, but if it can serve others in any capacity, than all the better!&lt;/p&gt;

&lt;p&gt;So welcome to theDB and happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://dbolella.github.io/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>dbolella@gmail.com (Danny Bolella)</author>
      <guid>https://dbolella.github.io/page/about/</guid>
      <description>

&lt;p&gt;My name is Danny Bolella.  I&amp;rsquo;m a Developer/Scrum Master who just wants to do what I love!  And coding just so happens to be one of those things.  For why I&amp;rsquo;ve created this blog, just out &lt;a href=&#34;../../post/2016-09-30-welcome/&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;my-history&#34;&gt;my history&lt;/h3&gt;

&lt;p&gt;I graduated from Stevens Insitute of Technology in 2012 with a B.S. in Computer Science.  While at Stevens, I participated in the Cooperative Education program, which earned me 2 years of full-time work experience across 3 companies.  I graduated not only with everything I learned in the classroom, but also the invaluable lessons and experiences I had working on real projects ranging from private equity tracking, to energey forecasting, to routing systems for oil tankers travelling across the globe.&lt;/p&gt;

&lt;p&gt;After I graduated I worked for 2 and a half years in the asset management part of a major bank.  There, I worked as a full stack developer for a handful of internal products.  Eventually, I joined where I am today as an iOS developer where I worked on the flagship mobile application responsible for millions of dollars in transactions.  My journey here has put me in the middle of a major agile transformation where I&amp;rsquo;ve practicaed pair programming, TDD, setting up and maintaing continuous integration processes, and wokring in sprints.  When the opportunity to take on a more leadership role presented itself, I took it and am now a Scrum Master.&lt;/p&gt;

&lt;h3 id=&#34;interests&#34;&gt;interests&lt;/h3&gt;

&lt;p&gt;Primarily, I&amp;rsquo;ve really been interested in Swift and node.js these days.  Node because it has so many uses and it&amp;rsquo;s quick and raw to work with.  And Swift because I&amp;rsquo;ve totally immersed my self in the iOS/Apple ecosystem now, but also because I&amp;rsquo;m one of those on the nadwagon who feel that the language is hopeful.  I truly believe it can be a great language that can be fun, elegant, and powerful.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>